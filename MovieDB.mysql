SET FOREIGN_KEY_CHECKS = 0;

DROP TABLE IF EXISTS Movies_Actors;
DROP TABLE IF EXISTS Reviews;
DROP TABLE IF EXISTS Movies;
DROP TABLE IF EXISTS Actors;
DROP TABLE IF EXISTS Directors;
DROP TABLE IF EXISTS Genres;

-- SET FOREIGN_KEY_CHECKS = 1;

-- TRUNCATE TABLE Genres;
-- TRUNCATE TABLE Directors;
-- TRUNCATE TABLE Movies;
-- TRUNCATE TABLE Actors;
-- TRUNCATE TABLE Movies_Actors;
-- TRUNCATE TABLE Reviews;


-- GENRES
CREATE TABLE Genres (
    genre_id INT AUTO_INCREMENT PRIMARY KEY ,
    genre_name VARCHAR(255) NOT NULL UNIQUE
);

-- VALUES
INSERT INTO Genres (genre_name) VALUES
('Action'),
('Comedy'),
('Drama'),
('Fantasy'),
('Horror'),
('Romance'),
('Science Fiction'),
('Thriller');

SELECT * FROM genres;


-- DIRECTORS
CREATE TABLE Directors (
    director_id INT AUTO_INCREMENT PRIMARY KEY,
    director_name VARCHAR(255) NOT NULL UNIQUE,
    birthdate DATE NOT NULL
);

-- VALUES
INSERT INTO Directors (director_name, birthdate) VALUES
('Steven Spielberg', '1946-12-18'),
('Christopher Nolan', '1970-07-30'),
('Quentin Tarantino', '1963-03-27'),
('Martin Scorsese', '1942-11-17'),
('Ridley Scott', '1937-11-30');

SELECT * FROM directors;


-- MOVIES
CREATE TABLE Movies (
    movie_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    release_year INT NOT NULL,
    genre_id INT,
    director_id INT,
    FOREIGN KEY (genre_id) REFERENCES Genres(genre_id),
    FOREIGN KEY (director_id) REFERENCES Directors(director_id)
);

-- VALUES
INSERT INTO Movies (title, release_year, genre_id, director_id) VALUES
('Inception', 2010, 7, 2), -- Science Fiction, Christopher Nolan
('The Dark Knight', 2008, 7, 2), -- Science Fiction, Christopher Nolan
('Pulp Fiction', 1994, 3, 3), -- Drama, Quentin Tarantino
('Jurassic Park', 1993, 7, 1), -- Science Fiction, Steven Spielberg
('The Wolf of Wall Street', 2013, 3, 4), -- Drama, Martin Scorsese
('Gladiator', 2000, 1, 5), -- Action, Ridley Scott
('Alien', 1979, 8, 5), -- Thriller, Ridley Scott
('Shutter Island', 2010, 8, 4) -- Thriller, Martin Scorese
;

SELECT m.movie_id, m.title, g.genre_name, release_year, d.director_name
FROM Movies m
JOIN Genres g ON g.genre_id = m.genre_id
JOIN Directors d ON d.director_id = m.director_id
ORDER BY movie_id;


-- ACTORS
CREATE TABLE Actors (
    actor_id INT AUTO_INCREMENT PRIMARY KEY,
    actor_name VARCHAR(255) NOT NULL,
    birthdate DATE NOT NULL
);

-- VALUES
INSERT INTO Actors (actor_name, birthdate) VALUES
('Leonardo DiCaprio', '1974-11-11'),
('Joseph Gordon-Levitt', '1945-12-25'),
('Ellen Page', '1987-02-21'),
('Christian Bale', '1974-01-30'),
('Heath Ledger', '1979-04-04'),
('John Travolta', '1954-02-18'),
('Samuel L. Jackson', '1948-12-21'),
('Jeff Goldblum', '1952-10-22'),
('Tom Hanks', '1956-07-09'),
('Russell Crowe', '1964-04-07'),
('Sigourney Weaver', '1949-10-08'),
('Mark Ruffalo', '1967-11-22');

SELECT * FROM actors;

-- MOVIES_ACTORS RELATIONSHIP
CREATE TABLE Movies_Actors (
    movie_id INT,
    actor_id INT,
    relation_id INT,    
    PRIMARY KEY(movie_id, actor_id),
    FOREIGN KEY (movie_id) REFERENCES Movies (movie_id),
    FOREIGN KEY (actor_id) REFERENCES Actors (actor_id)
);


-- VALUES
INSERT INTO Movies_Actors (relation_id, movie_id, actor_id) VALUES
(1, 1, 1),
(2, 1, 2),
(3, 1, 3),
(4, 2, 4),
(5, 2, 5),
(6, 3, 6),
(7, 3, 7),
(8, 4, 8),
(9, 5, 1),
(10, 6, 10),
(11, 7, 11),
(12, 8, 1),
(13, 8, 12);

SELECT 
    m.movie_id,
    m.title,
    GROUP_CONCAT(a.actor_name SEPARATOR ', ') AS actors
FROM Movies_Actors ma
JOIN Movies m ON ma.movie_id = m.movie_id
JOIN Actors a ON ma.actor_id = a.actor_id
GROUP BY m.movie_id, m.title;



-- REVIEWS
CREATE TABLE Reviews (
    r_id INT AUTO_INCREMENT PRIMARY KEY,
    rating FLOAT NOT NULL,
    review TEXT NOT NULL,
    movie_id INT,
    FOREIGN KEY (movie_id) REFERENCES Movies (movie_id)
);

-- VALUES
INSERT INTO Reviews (r_id, movie_id, rating, review) VALUES
(1, 1, 4.8, 'A mind-bending experience with stunning visuals and a gripping story.'),
(2, 2, 4.9, 'An outstanding superhero film with deep characters and a thrilling plot.'),
(3, 3, 4.7, 'A classic that redefined the genre with its non-linear storytelling.'),
(4, 4, 4.5, 'A groundbreaking film that set the standard for modern blockbusters.'),
(5, 5, 4.6, 'A wild ride through the world of finance with an unforgettable performance.'),
(6, 6, 4.3, 'A historical epic with impressive performances and spectacular action.'),
(7, 7, 4.4, 'A tense, atmospheric horror film that has stood the test of time.'),
(8, 8, 4.2, 'A psychological thriller that keeps you on the edge of your seat.');

SELECT m.title, r.rating, r.review
FROM Reviews r
JOIN Movies m ON m.movie_id = r.movie_id
ORDER BY rating DESC;



-- QUERIES:

-- Movies of a specific director
SELECT 
    mo.title, 
    mo.release_year
FROM 
    Movies mo
JOIN 
    Directors di ON mo.director_id = di.director_id
WHERE 
    di.director_name = 'Christopher Nolan'
ORDER BY 
    release_year DESC;

-- List top-rated movies by genre
SELECT 
    g.genre_name, 
    mo.title, 
    ROUND(AVG(re.rating), 2) as average_rating
FROM 
    Movies mo
JOIN 
    Reviews re ON mo.movie_id = re.movie_id
JOIN 
    Genres g ON mo.genre_id = g.genre_id
GROUP BY 
    g.genre_name, mo.title
ORDER BY
    average_rating DESC;

-- Movies by a particular actor
SELECT 
    m.title, 
    m.release_year
FROM
    Movies m
JOIN 
    Movies_Actors ma ON m.movie_id = ma.movie_id
JOIN 
    Actors a ON ma.actor_id = a.actor_id
WHERE 
    a.actor_name = 'Leonardo DiCaprio'
ORDER BY 
    release_year;

--Aggregate reviews to find highest rated movie
SELECT 
    m.title, 
    ROUND(AVG(r.rating), 2) AS average_rating
FROM 
    Movies m
JOIN 
    Reviews r ON m.movie_id = r.movie_id
GROUP BY 
    m.title
ORDER BY 
    average_rating DESC
LIMIT 5;


-- Retrieve the top 5 highest-rated movies along with their average rating
SELECT 
    m.title, 
    ROUND(AVG(r.rating), 2) AS average_rating
FROM 
    Movies m
JOIN 
    Reviews r ON m.movie_id = r.movie_id
GROUP BY 
    m.title
ORDER BY 
    average_rating DESC
LIMIT 5;


-- Get the list of movies released in the 2000s along with their genres and directors
SELECT 
    m.movie_id, 
    m.title, 
    m.release_year, 
    g.genre_name, 
    d.director_name
FROM 
    Movies m
JOIN 
    Genres g ON m.genre_id = g.genre_id
JOIN 
    Directors d ON m.director_id = d.director_id
WHERE 
    m.release_year BETWEEN 2000 AND 2009
ORDER BY 
    movie_id;


-- Find the director who has the highest average movie rating
SELECT 
    d.director_name, 
    ROUND(AVG(r.rating), 2) AS average_rating
FROM 
    Movies m
JOIN 
    Reviews r ON m.movie_id = r.movie_id
JOIN 
    Directors d ON m.director_id = d.director_id
GROUP BY 
    d.director_name
ORDER BY 
    average_rating DESC
LIMIT 1;


-- List all movies and their genres, including movies with no reviews
SELECT 
    m.title, 
    g.genre_name, 
    ROUND(AVG(r.rating), 2) AS average_rating
FROM 
    Movies m
LEFT JOIN 
    Genres g ON m.genre_id = g.genre_id
LEFT JOIN 
    Reviews r ON m.movie_id = r.movie_id
GROUP BY 
    m.title, g.genre_name;


-- Get the number of movies per genre
SELECT g.genre_name,
    CASE 
        WHEN COUNT(m.movie_id) = 0 THEN 'No Movies Yet'
        ELSE GROUP_CONCAT(m.title SEPARATOR ', ')
    END AS movies,
    COUNT (m.movie_id) AS movie_count
FROM
    Genres g
LEFT JOIN
    Movies m ON g.genre_id = m.genre_id
GROUP BY
    g.genre_id, g.genre_name
ORDER BY 
    movie_count DESC;



-- Find the average rating of movies for each genre
SELECT 
    g.genre_name, 
    ROUND(AVG(r.rating), 2) AS average_rating,
    GROUP_CONCAT(m.title SEPARATOR ', ')
FROM 
    Movies m
JOIN 
    Reviews r ON m.movie_id = r.movie_id
JOIN 
    Genres g ON m.genre_id = g.genre_id
GROUP BY 
    g.genre_name
ORDER BY 
    average_rating DESC;